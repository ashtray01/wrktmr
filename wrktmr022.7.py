# v022.5 ‚Äî –ñ—É—Ä–Ω–∞–ª –∑–∞–¥–∞—á —Å GUI, –∂–∏–≤—ã–º–∏ —Ç–∞–π–º–µ—Ä–∞–º–∏, Markdown-—Å—Å—ã–ª–∫–∞–º–∏, —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤—ã—Å–æ—Ç–æ–π –∑–∞–¥–∞—á, –≤—ã–±–æ—Ä–æ–º –ø–∞–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º

import os
import sys
import time
import datetime
import signal
import re
import tempfile
import ctypes
import uuid
import PyQt6
from urllib.parse import urlparse
import openpyxl
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
from openpyxl.utils import get_column_letter
from collections import Counter
from colorama import init, Fore, Style

# ======================
# –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ–∫–Ω–∞ –¥–ª—è Windows 10/11
# ======================

def set_dark_title_bar_qt(window):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—ë–º–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ–∫–Ω–∞ –≤ Windows 10/11 –¥–ª—è PyQt6"""
    if sys.platform != "win32":
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º HWND –æ–∫–Ω–∞
        hwnd = int(window.winId())

        # –í–∫–ª—é—á–∞–µ–º —Ç—ë–º–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∞
        # DWMWA_USE_IMMERSIVE_DARK_MODE = 20
        dark_mode_attribute = 20
        value = ctypes.c_int(1)
        ctypes.windll.dwmapi.DwmSetWindowAttribute(
            hwnd,
            dark_mode_attribute,
            ctypes.byref(value),
            ctypes.sizeof(value)
        )
    except Exception as e:
        print(f"[–¢—ë–º–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å: {e}")

# GUI
from PyQt6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
                             QTextEdit, QLineEdit, QPushButton, QLabel, QScrollArea, 
                             QFrame, QMessageBox, QFileDialog, QComboBox, QDialog, 
                             QDialogButtonBox, QFormLayout, QSpinBox, QDoubleSpinBox)
from PyQt6.QtCore import Qt, QTimer, QUrl, QTime, QSize
from PyQt6.QtGui import QFont, QDesktopServices, QColor, QTextCharFormat, QTextCursor, QPalette

init(autoreset=True)

# ======================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# ======================

def get_temp_log_dir():
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –ª–æ–≥–æ–≤ (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞)"""
    temp_dir = tempfile.gettempdir()
    today = datetime.date.today()
    return os.path.join(temp_dir, "task_journal", str(today.year), f"{today.month:02d}", f"{today.day:02d}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
LOG_DIR = get_temp_log_dir()
os.makedirs(LOG_DIR, exist_ok=True)

# –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Excel ‚Äî –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é Desktop, –Ω–æ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å
SAVE_DIR = os.path.join(os.path.expanduser("~"), "Desktop")

tasks = []  # —ç–ª–µ–º–µ–Ω—Ç—ã: {"task","link","time_str","minutes","hours_hundredths", "timer_start" (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)}
active_tasks_file = os.path.join(LOG_DIR, "active_tasks.tmp")
active_save_timer = None  # –¢–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
current_theme = "dark"  # –∏–ª–∏ "light"

# ======================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ
# ======================

def signal_handler(sig, frame):
    print(Fore.YELLOW + "\n–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ Ctrl+C! –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ...")
    save_backup()
    print(Fore.MAGENTA + "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)

def parse_domain(url):
    try:
        parsed = urlparse(url)
        return parsed.netloc or url
    except:
        return url
    
def format_start_time(timestamp):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç timestamp –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ –≤—Ä–µ–º—è (—Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º, –µ—Å–ª–∏ –µ—Å—Ç—å)"""
    try:
        if not isinstance(timestamp, (int, float)):
            return "–ù–∞—á–∞—Ç–∞: –≤—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –≤ datetime —Å –ª–æ–∫–∞–ª—å–Ω–æ–π —Ç–∞–π–º–∑–æ–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        dt = datetime.datetime.fromtimestamp(timestamp)

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–º—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        tz_name = dt.strftime("%Z")  # –ù–∞–ø—Ä–∏–º–µ—Ä: "MSK", "CET", "PDT", –∏–ª–∏ –ø—É—Å—Ç–æ
        tz_info = f" ({tz_name})" if tz_name.strip() else ""

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º: 14:22 15.04.2025 (MSK)
        formatted = dt.strftime("%H:%M %d.%m.%Y") + tz_info

        return f"–ù–∞—á–∞—Ç–∞: {formatted}"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return "–ù–∞—á–∞—Ç–∞: –≤—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

def key_for_group(t):
    if t.get("link"):
        return t["link"].strip().lower()
    return t["task"].strip().lower()

def load_backup():
    today = datetime.date.today().strftime("%Y-%m-%d")
    log_file = os.path.join(LOG_DIR, f"{today}.txt")
    if os.path.exists(log_file):
        with open(log_file, "r", encoding="utf-8") as f:
            for line in f:
                try:
                    parts = line.strip().split(" | ")
                    if len(parts) < 4:
                        continue
                    task, link, time_str, hours_hundredths = parts
                    if time_str == "<1 –º–∏–Ω—É—Ç—ã":
                        minutes = 0.5
                    else:
                        if "-" in time_str:
                            minutes = parse_time_range(time_str)
                        else:
                            try:
                                mins, secs = map(int, time_str.split(":"))
                                minutes = mins + secs / 60
                            except:
                                minutes = float(time_str) if time_str.replace('.','',1).isdigit() else 0.0

                    tasks.append({
                        "id": str(uuid.uuid4()),
                        "task": task,
                        "link": link,
                        "time_str": time_str,
                        "minutes": round(minutes, 2),
                        "hours_hundredths": float(hours_hundredths)
                    })

                except Exception as e:
                    print(Fore.RED + f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è backup: {e}")

        if tasks:
            print(Fore.GREEN + f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –∏–∑ backup: {log_file}")

    # ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥—É–±–ª–µ–π ‚Äî –î–ï–õ–ê–ï–ú –≠–¢–û –í –ö–û–ù–¶–ï, –ü–û–°–õ–ï –ó–ê–ì–†–£–ó–ö–ò –ê–ö–¢–ò–í–ù–´–• –ó–ê–î–ê–ß
    active_ids = {t.get("id") for t in tasks if "timer_start" in t}
    if active_ids:
        # –û—Å—Ç–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ + –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        tasks[:] = [t for t in tasks if "timer_start" in t or t.get("id") not in active_ids]

def load_active_tasks():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–π–º–µ—Ä—ã"""
    if not os.path.exists(active_tasks_file):
        return

    try:
        with open(active_tasks_file, "r", encoding="utf-8") as f:
            for line in f:
                try:
                    parts = line.strip().split(" | ")
                    if len(parts) < 4:
                        continue
                    task_id, task, link, start_timestamp_str = parts
                    start_timestamp = float(start_timestamp_str)

                    tasks.append({
                        "id": task_id,
                        "task": task,
                        "link": link,
                        "timer_start": start_timestamp,
                        "minutes": 0.0,
                        "hours_hundredths": 0.0,
                        "time_str": "0:00"
                    })
                except Exception as e:
                    print(Fore.RED + f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏: {e}")

        if tasks:
            active_count = len([t for t in tasks if 'timer_start' in t])
            print(Fore.GREEN + f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {active_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.")
    except Exception as e:
        print(Fore.RED + f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {e}")

def save_backup():
    today = datetime.date.today().strftime("%Y-%m-%d")
    log_file = os.path.join(LOG_DIR, f"{today}.txt")
    os.makedirs(os.path.dirname(log_file), exist_ok=True)
    with open(log_file, "w", encoding="utf-8") as f:
        for t in tasks:
            # üî• –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –∞–∫—Ç–∏–≤–Ω—ã (–∏–º–µ—é—Ç timer_start)
            if "timer_start" in t:
                continue
            clean_t = {k: v for k, v in t.items() if k != 'timer_start'}
            f.write(f"{clean_t['task']} | {clean_t['link']} | {clean_t['time_str']} | {clean_t['hours_hundredths']}\n")
    #–¥–µ–±–∞–≥
    #print(f"[DEBUG] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á, –∏–∑ –Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö: {len([t for t in tasks if 'timer_start' in t])}")

def save_active_tasks():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á–∏ '–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ' (—Å timer_start) –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, —Å ID"""
    try:
        active_tasks = [t for t in tasks if "timer_start" in t]
        if not active_tasks:
            if os.path.exists(active_tasks_file):
                os.remove(active_tasks_file)
            return

        with open(active_tasks_file, "w", encoding="utf-8") as f:
            for t in active_tasks:
                task_copy = t.copy()
                start_time = task_copy.pop("timer_start")
                task_id = task_copy.get("id", str(uuid.uuid4()))  # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ id –Ω–µ—Ç
                # –§–æ—Ä–º–∞—Ç: id | task | link | start_timestamp
                f.write(f"{task_id} | {task_copy['task']} | {task_copy['link']} | {start_time}\n")
    #–¥–µ–±–∞–≥
    #print(f"[DEBUG] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á, –∏–∑ –Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö: {len([t for t in tasks if 'timer_start' in t])}")


    except Exception as e:
        print(Fore.RED + f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {e}")

def remove_active_task(index):
    """–£–¥–∞–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É (–ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)"""
    try:
        if index < 0 or index >= len(tasks):
            return

        task_id = tasks[index].get("id")
        if not task_id:
            return

        # –ü–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        if not os.path.exists(active_tasks_file):
            return

        remaining_lines = []
        removed = False

        with open(active_tasks_file, "r", encoding="utf-8") as f:
            for line in f:
                parts = line.strip().split(" | ")
                if len(parts) < 4:  # id | task | link | start_timestamp
                    remaining_lines.append(line.strip())
                    continue

                saved_id, _, _, _ = parts
                if saved_id != task_id:
                    remaining_lines.append(line.strip())
                else:
                    removed = True

        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
        with open(active_tasks_file, "w", encoding="utf-8") as f:
            for line in remaining_lines:
                f.write(line + "\n")

        if not remaining_lines:
            os.remove(active_tasks_file)

        if removed:
            print(Fore.GREEN + f"–ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ {task_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.")

    except Exception as e:
        print(Fore.RED + f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏: {e}")

def group_tasks():
    grouped = {}
    for t in tasks:
        link_key = t["link"].strip().lower() if t.get("link") else None
        if link_key:
            if link_key not in grouped:
                grouped[link_key] = {
                    "task": t["task"],
                    "link": t["link"],
                    "minutes": 0.0,
                    "hours_hundredths": 0.0,
                    "count": 0,
                    "key": link_key
                }
            grouped[link_key]["minutes"] += t["minutes"]
            grouped[link_key]["hours_hundredths"] += t["hours_hundredths"]
            grouped[link_key]["count"] += 1

        name_key = t["task"].strip().lower()
        if name_key not in grouped:
            grouped[name_key] = {
                "task": t["task"],
                "link": t["link"],
                "minutes": 0.0,
                "hours_hundredths": 0.0,
                "count": 0,
                "key": name_key
            }
        grouped[name_key]["minutes"] += t["minutes"]
        grouped[name_key]["hours_hundredths"] += t["hours_hundredths"]
        grouped[name_key]["count"] += 1

    return [g for g in grouped.values() if g["count"] > 1]

# ======================
# –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ 13:24-16:39
# ======================

def parse_time_range(time_str):
    try:
        start_str, end_str = time_str.split("-")
        h1, m1 = map(int, start_str.split(":"))
        h2, m2 = map(int, end_str.split(":"))
        start_minutes = h1 * 60 + m1
        end_minutes = h2 * 60 + m2
        if end_minutes < start_minutes:
            end_minutes += 24 * 60
        diff = end_minutes - start_minutes
        return diff
    except:
        return 0.0

# ======================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ Markdown-—Å—Å—ã–ª–æ–∫ [—Ç–µ–∫—Å—Ç](url)
# ======================

def extract_markdown_links(text):
    pattern = r'\[([^\]]+)\]\(([^)]+)\)'
    matches = re.findall(pattern, text)
    if matches:
        display_text = matches[0][0]
        url = matches[0][1]
        clean_text = re.sub(pattern, display_text, text, count=1)
        return clean_text.strip(), url.strip()
    return text.strip(), ""

# ======================
# Excel —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
# ======================

def style_tasks_and_summary(ws, n_tasks_rows, grouped, group_key_to_rows):
    thin = Border(left=Side(style='thin'),
                  right=Side(style='thin'),
                  top=Side(style='thin'),
                  bottom=Side(style='thin'))

    palette = [
        "FFF2CC", "E2EFDA", "DDEBF7", "FCE4D6", "EDEDED",
        "CCE5FF", "FFD966", "C6E0B4", "D9E1F2", "FFEB9C",
        "E7E6E6", "D5E8D4", "D0CECE", "F8CBAD", "C9DAF8"
    ]

    def color_for_key(k):
        if not k:
            return None
        idx = abs(hash(k)) % len(palette)
        return PatternFill(start_color=palette[idx], end_color=palette[idx], fill_type="solid")

    max_row = ws.max_row
    max_col = ws.max_column

    header_fill = PatternFill(start_color="4F81BD", end_color="4F81BD", fill_type="solid")
    for col in range(1, max_col + 1):
        c = ws.cell(row=1, column=col)
        c.font = Font(bold=True, color="FFFFFF")
        c.alignment = Alignment(vertical="center", horizontal="left")
        c.fill = header_fill
        c.border = thin

    for r in range(2, 2 + n_tasks_rows - 1 if n_tasks_rows > 0 else 1):
        zebra = PatternFill(start_color="F7F7F7", end_color="F7F7F7", fill_type="solid") if (r % 2 == 0) else None
        if r in group_key_to_rows["row_to_key"]:
            k = group_key_to_rows["row_to_key"][r]
            fill = color_for_key(k)
        else:
            fill = zebra

        for col in range(1, max_col + 1):
            cell = ws.cell(row=r, column=col)
            if fill:
                cell.fill = fill
            cell.alignment = Alignment(vertical="center", wrap_text=True)
            cell.border = thin

    total_row = None
    for r in range(1, ws.max_row + 1):
        if ws.cell(row=r, column=1).value == "–ò–¢–û–ì–û":
            total_row = r
            break
    if total_row:
        for col in range(1, max_col + 1):
            c = ws.cell(row=total_row, column=col)
            c.font = Font(bold=True)
            c.fill = PatternFill(start_color="C6EFCE", end_color="C6EFCE", fill_type="solid")
            c.border = thin

    summary_header_row = None
    for r in range(1, ws.max_row + 1):
        if ws.cell(row=r, column=1).value == "–°–í–û–î–ö–ê (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ –ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è)":
            summary_header_row = r
            break

    if summary_header_row:
        for col in range(1, max_col + 1):
            c = ws.cell(row=summary_header_row, column=col)
            c.font = Font(bold=True)
            c.fill = PatternFill(start_color="D9E1F2", end_color="D9E1F2", fill_type="solid")
            c.border = thin

        sr = summary_header_row + 1
        while sr <= ws.max_row:
            a = ws.cell(row=sr, column=1).value
            b = ws.cell(row=sr, column=2).value
            c3 = ws.cell(row=sr, column=3).value
            if a is None and b is None and c3 is None:
                break
            matched_key = None
            for g in grouped:
                if a and a == g["task"]:
                    matched_key = g["key"]
                    break
                if b and b == parse_domain(g["link"] or ""):
                    matched_key = g["key"]
                    break
            if matched_key:
                fill = color_for_key(matched_key)
                if fill:
                    for col in range(1, max_col + 1):
                        cell = ws.cell(row=sr, column=col)
                        cell.fill = fill
                        cell.border = thin
            sr += 1

    if n_tasks_rows > 0:
        ws.auto_filter.ref = f"A1:D{1 + n_tasks_rows}"
    ws.freeze_panes = "A2"

    for row in ws.iter_rows(min_row=1, max_row=ws.max_row, min_col=1, max_col=max_col):
        for cell in row:
            if not cell.border:
                cell.border = thin
            if not cell.alignment:
                cell.alignment = Alignment(vertical="center")

    for col in range(1, max_col + 1):
        column = get_column_letter(col)
        max_len = 0
        for row in range(1, ws.max_row + 1):
            val = ws.cell(row=row, column=col).value
            if val is None:
                continue
            max_len = max(max_len, len(str(val)))
        ws.column_dimensions[column].width = max(10, min(60, max_len + 2))

def save_excel():
    global SAVE_DIR
    today = datetime.date.today().strftime("%Y-%m-%d")
    file_name = os.path.join(SAVE_DIR, f"{today}.xlsx")

    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "Tasks"

    ws.append(["–ó–∞–¥–∞—á–∞", "–°—Å—ã–ª–∫–∞ (–¥–æ–º–µ–Ω)", "–í—Ä–µ–º—è (–º–∏–Ω:—Å–µ–∫)", "–í—Ä–µ–º—è (—á–∞—Å—ã –≤ —Å–æ—Ç—ã—Ö)"])

    total_minutes = 0.0
    total_hours_hundredths = 0.0

    keys = [key_for_group(t) for t in tasks]
    dup_keys = {k for k, c in Counter(keys).items() if c > 1}
    row_to_key = {}

    for t in tasks:
        domain = parse_domain(t['link']) if t['link'] else ""
        row_index = ws.max_row + 1
        ws.cell(row=row_index, column=1, value=t['task'])
        if t['link']:
            link_cell = ws.cell(row=row_index, column=2, value=domain)
            link_cell.hyperlink = t['link']
            link_cell.style = "Hyperlink"
        else:
            ws.cell(row=row_index, column=2, value="")
        ws.cell(row=row_index, column=3, value=t['time_str'])
        ws.cell(row=row_index, column=4, value=t['hours_hundredths'])

        k = key_for_group(t)
        if k in dup_keys:
            row_to_key[row_index] = k

        total_minutes += t['minutes']
        total_hours_hundredths += t['hours_hundredths']

    n_tasks_rows = len(tasks) + 1

    ws.append([])
    ws.append(["–ò–¢–û–ì–û", "", f"{round(total_minutes, 2)} –º–∏–Ω", f"{round(total_hours_hundredths, 2)} —á"])

    grouped = group_tasks()
    if grouped:
        ws.append([])
        ws.append(["–°–í–û–î–ö–ê (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ –ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è)"])
        for gt in grouped:
            ws.append([
                gt["task"],
                parse_domain(gt["link"]) if gt["link"] else "",
                f"{round(gt['minutes'], 2)} –º–∏–Ω",
                f"{round(gt['hours_hundredths'], 2)} —á"
            ])

    style_tasks_and_summary(
        ws=ws,
        n_tasks_rows=n_tasks_rows,
        grouped=grouped,
        group_key_to_rows={"row_to_key": row_to_key}
    )

    try:
        wb.save(file_name)
        print(Fore.GREEN + f"Excel-–æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {file_name}")
        return file_name
    except Exception as e:
        print(Fore.RED + f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ Excel: {e}")
        return None

# ======================
# GUI –ö–ª–∞—Å—Å—ã
# ======================

class TaskItemWidget(QFrame):
    def __init__(self, task_data, index, parent=None):
        super().__init__(parent)
        self.task_data = task_data
        self.index = index
        self.parent_window = parent
        self.timer_label = None
        self.timer = None
        self.setup_ui()
        if "timer_start" in self.task_data:
            self.start_live_timer()

    def setup_ui(self):
        if current_theme == "light":
            self.setStyleSheet("""
                        TaskItemWidget {
                            background-color: white;
                            border-radius: 8px;
                            border: 1px solid #e0e0e0;
                            margin: 4px;
                        }
                    """)
        else:
            self.setStyleSheet("""
                        TaskItemWidget {
                            background-color: #2a2a2a;
                            border-radius: 6px;
                            border: 1px solid #444;
                            margin: 4px;
                        }
                    """)
        self.setFrameShadow(QFrame.Shadow.Raised)
        main_layout = QHBoxLayout()
        main_layout.setContentsMargins(10, 8, 10, 8)
        main_layout.setSpacing(10)

        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        left_layout = QVBoxLayout()
        left_layout.setSpacing(3)

        # –ó–∞–¥–∞—á–∞
        task_label = QLabel()
        task_text = self.task_data['task']
        task_label.setTextFormat(Qt.TextFormat.RichText)
        task_label.setText(self.format_markdown_links(task_text))
        task_label.setWordWrap(True)
        task_label.setTextInteractionFlags(Qt.TextInteractionFlag.TextBrowserInteraction)
        task_label.linkActivated.connect(self.open_link)
        task_label.setStyleSheet("font-size: 13px;")
        left_layout.addWidget(task_label)

        # –°—Å—ã–ª–∫–∞
        if self.task_data['link']:
            domain = parse_domain(self.task_data['link'])
            link_label = QLabel(f"<a href='{self.task_data['link']}' style='color: #64b5f6; font-size: 11px;'>üîó {domain}</a>")
            link_label.setTextFormat(Qt.TextFormat.RichText)
            link_label.setTextInteractionFlags(Qt.TextInteractionFlag.TextBrowserInteraction)
            link_label.linkActivated.connect(self.open_link)
            left_layout.addWidget(link_label)

        # –í—Ä–µ–º—è
        self.time_display = QLabel()
        self.update_time_display()
        self.time_display.setStyleSheet("font-size: 11px; color: #aaa;")
        left_layout.addWidget(self.time_display)

        main_layout.addLayout(left_layout)

        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å ‚Äî –∫–Ω–æ–ø–∫–∏ (—à–∏—Ä–∏–Ω–∞ 15% –æ—Ç –æ–∫–Ω–∞, –≤—ã—Å–æ—Ç–∞ 32px)
        button_layout = QVBoxLayout()
        button_layout.setSpacing(5)
        button_layout.addStretch()

        button_width = int(self.parent_window.width() * 0.2) if self.parent_window else 150  # +50% —à–∏—Ä–∏–Ω—ã
        button_height = 32

        if "timer_start" in self.task_data:
            self.finish_btn = QPushButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É")
            self.finish_btn.setFixedSize(button_width, button_height)
            self.finish_btn.clicked.connect(self.confirm_finish_task)
            self.finish_btn.setStyleSheet("""
                QPushButton {
                    background-color: #d32f2f;   /* üî¥ –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç */
                    color: white;
                    border: 1px solid #b71c1c;
                    border-radius: 4px;
                    padding: 4px 8px;
                }
                QPushButton:hover {
                    background-color: #f44336;   /* üî• –Ø—Ä—á–µ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ */
                }
            """)
            button_layout.addWidget(self.finish_btn)
            self.start_time_label = QLabel()
            self.start_time_label.setFixedWidth(button_width)  # üî• –§–∏–∫—Å–∏—Ä—É–µ–º —à–∏—Ä–∏–Ω—É –∫–∞–∫ —É –∫–Ω–æ–ø–æ–∫
            self.start_time_label.setStyleSheet("font-size: 10px; color: #aaa; padding-top: 5px;")
            self.start_time_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
            self.start_time_label.setWordWrap(True)  # üî• –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è
            self.update_start_time_label()
            button_layout.addWidget(self.start_time_label)
        else:
            edit_btn = QPushButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
            edit_btn.setFixedSize(button_width, button_height)
            edit_btn.clicked.connect(self.edit_task)

            delete_btn = QPushButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")
            delete_btn.setFixedSize(button_width, button_height)
            delete_btn.clicked.connect(self.delete_task)

            button_layout.addWidget(edit_btn)
            button_layout.addWidget(delete_btn)

        button_layout.addStretch()
        main_layout.addLayout(button_layout)

        self.setLayout(main_layout)
        self.setFixedHeight(90)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤—ã—Å–æ—Ç–∞

    def format_markdown_links(self, text):
        pattern = r'\[([^\]]+)\]\(([^)]+)\)'
        def repl(match):
            display = match.group(1)
            url = match.group(2)
            return f'<a href="{url}" style="color: #64b5f6;">{display}</a>'
        return re.sub(pattern, repl, text)

    def open_link(self, url):
        QDesktopServices.openUrl(QUrl(url))

    def update_time_display(self):
        if "timer_start" in self.task_data:
            elapsed = time.time() - self.task_data['timer_start']
            minutes = elapsed / 60
            
            # –ê–Ω–∏–º–∞—Ü–∏—è / | \ -
            anim_chars = ['|', '/', '-', '\\']
            if not hasattr(self, '_anim_index'):
                self._anim_index = 0
            else:
                self._anim_index = (self._anim_index + 1) % 4

            anim_char = anim_chars[self._anim_index]
            self.time_display.setText(f"<span style='color: #4caf50;'>‚è±Ô∏è –í –ø—Ä–æ—Ü–µ—Å—Å–µ ({int(minutes)} –º–∏–Ω)</span> {anim_char}")
        else:
            self.time_display.setText(f"‚è±Ô∏è {self.task_data['time_str']} ({self.task_data['hours_hundredths']} —á)")

    def start_live_timer(self):
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.update_time_display)
        self.timer.start(1000)

    def confirm_finish_task(self):
        reply = QMessageBox.question(
            self,
            "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        if reply == QMessageBox.StandardButton.Yes:
            self.finish_task()

    def finish_task(self):
        if "timer_start" not in self.task_data:
            return
        remove_active_task(self.index)

        elapsed = time.time() - self.task_data['timer_start']
        minutes = elapsed / 60
        hours_hundredths = round(minutes / 60, 2)
        time_str = "<1 –º–∏–Ω—É—Ç—ã" if minutes < 1 else f"{int(minutes)}:{int((minutes%1)*60):02d}"

        tasks[self.index].update({
            "minutes": round(minutes, 2),
            "hours_hundredths": hours_hundredths,
            "time_str": time_str
        })
        del tasks[self.index]["timer_start"]

        if self.timer:
            self.timer.stop()

        save_backup()
        self.parent_window.load_tasks_to_ui()

    def edit_task(self):
        self.parent_window.edit_task(self.index)

    def delete_task(self):
        self.parent_window.delete_task(self.index)

    def update_start_time_label(self):
        if hasattr(self, 'start_time_label') and "timer_start" in self.task_data:
            start_timestamp = self.task_data["timer_start"]
            if isinstance(start_timestamp, (int, float)):
                time_str = format_start_time(start_timestamp)
                self.start_time_label.setText(time_str)
                self.start_time_label.show()
            else:
                self.start_time_label.hide()
        elif hasattr(self, 'start_time_label'):
            self.start_time_label.hide()

class EditTaskDialog(QDialog):
    def __init__(self, task_data, parent=None):
        super().__init__(parent)
        self.task_data = task_data
        self.setWindowTitle("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É")
        self.resize(500, 200)
        self.setup_ui()

    def setup_ui(self):
        layout = QFormLayout()

        self.task_input = QLineEdit(self.task_data.get("task", ""))
        self.link_input = QLineEdit(self.task_data.get("link", ""))
        
        # üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –í –ø–æ–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–¥–∞—ë–º –ß–ò–°–õ–û –ú–ò–ù–£–¢ (–Ω–µ time_str!)
        minutes_value = self.task_data.get("minutes", 0.0)
        self.time_input = QLineEdit(str(minutes_value))  # ‚Üê –í–∞–∂–Ω–æ! –ù–µ time_str, –∞ minutes

        layout.addRow("üìù –ó–∞–¥–∞—á–∞:", self.task_input)
        layout.addRow("üîó –°—Å—ã–ª–∫–∞:", self.link_input)
        layout.addRow("‚è±Ô∏è –í—Ä–µ–º—è (–≤ –º–∏–Ω—É—Ç–∞—Ö):", self.time_input)

        buttons = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
        buttons.accepted.connect(self.accept)
        buttons.rejected.connect(self.reject)
        layout.addRow(buttons)

        self.setLayout(layout)

    def get_data(self):
        task_text = self.task_input.text().strip()
        link = self.link_input.text().strip()
        time_input_text = self.time_input.text().strip()

        minutes = 0.0
        try:
            minutes = float(time_input_text)
        except:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç.")
            return None

        hours_hundredths = round(minutes / 60, 2)
        time_str = "<1 –º–∏–Ω—É—Ç—ã" if minutes < 1 else f"{int(minutes)}:{int((minutes%1)*60):02d}"

        return {
            "task": task_text,
            "link": link,
            "time_str": time_str,
            "minutes": round(minutes, 2),
            "hours_hundredths": hours_hundredths
        }


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("‚è∞ wrktmr v022.7")
        self.setGeometry(100, 100, 900, 700)
        self.tasks_widgets = []
        load_active_tasks()
        load_backup()
        self.init_ui()
        self.apply_theme()
        self.load_tasks_to_ui()
        self.start_active_save_timer()
        self.show()
        set_dark_title_bar_qt(self)
    def start_active_save_timer(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"""
        global active_save_timer
        if active_save_timer:
            return

        def save_loop():
            save_active_tasks()
            active_save_timer = QTimer.singleShot(10000, save_loop)  # –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫

        save_loop()

    def init_ui(self):
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QVBoxLayout(central_widget)

        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å: —Ç–µ–º–∞ + –ø—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        top_layout = QHBoxLayout()

        self.theme_combo = QComboBox()
        self.theme_combo.addItems(["üåô –¢—ë–º–Ω–∞—è —Ç–µ–º–∞", "‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞"])
        self.theme_combo.currentIndexChanged.connect(self.toggle_theme)
        top_layout.addWidget(QLabel("–¢–µ–º–∞:"))
        top_layout.addWidget(self.theme_combo)

        top_layout.addSpacing(20)

        self.log_path_label = QLabel(f" –ü–∞–ø–∫–∞ —Å –ª–æ–≥–∞–º–∏ üìÅ {SAVE_DIR}")
        self.log_path_label.setStyleSheet("font-size: 10px; color: #888;")
        top_layout.addWidget(self.log_path_label)

        log_folder_btn = QPushButton("üìÇ")
        log_folder_btn.setFixedHeight(26)  # üî• –£–º–µ–Ω—å—à–µ–Ω–∞ –≤—ã—Å–æ—Ç–∞ –∫–Ω–æ–ø–∫–∏
        log_folder_btn.clicked.connect(self.open_log_folder)
        top_layout.addWidget(log_folder_btn)

        # –ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        change_folder_btn = QPushButton("‚öôÔ∏è")
        change_folder_btn.setFixedHeight(26)
        change_folder_btn.clicked.connect(self.change_save_folder)
        top_layout.addWidget(change_folder_btn)

        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
        clear_logs_btn = QPushButton("üóëÔ∏è")
        clear_logs_btn.setFixedHeight(26)
        clear_logs_btn.clicked.connect(self.clear_all_logs)
        top_layout.addWidget(clear_logs_btn)

        top_layout.addStretch()
        main_layout.addLayout(top_layout)

        # –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        self.tasks_container = QWidget()
        self.tasks_layout = QVBoxLayout(self.tasks_container)
        self.tasks_layout.addStretch()
        self.tasks_layout.setSpacing(5)
        scroll_area.setWidget(self.tasks_container)
        main_layout.addWidget(scroll_area)

        # –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞
        input_form = QFrame()
        input_form.setFrameShape(QFrame.Shape.StyledPanel)
        form_layout = QVBoxLayout(input_form)

        self.task_input = QLineEdit()
        self.task_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É (–º–æ–∂–Ω–æ [—Ç–µ–∫—Å—Ç](—Å—Å—ã–ª–∫–∞))")
        self.link_input = QLineEdit()
        self.link_input.setPlaceholderText("–°—Å—ã–ª–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
        self.time_input = QLineEdit()
        self.time_input.setPlaceholderText("–í—Ä–µ–º—è (–º–∏–Ω—É—Ç—ã –∏–ª–∏ 13:24-16:39). –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞.")

        form_layout.addWidget(QLabel("üìù –ó–∞–¥–∞—á–∞:"))
        form_layout.addWidget(self.task_input)
        form_layout.addWidget(QLabel("üîó –°—Å—ã–ª–∫–∞:"))
        form_layout.addWidget(self.link_input)
        form_layout.addWidget(QLabel("‚è±Ô∏è –í—Ä–µ–º—è:"))
        form_layout.addWidget(self.time_input)

        # –ö–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É
        btn_layout = QHBoxLayout()
        add_btn = QPushButton("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
        add_btn.clicked.connect(self.add_task)
        stats_btn = QPushButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        stats_btn.clicked.connect(self.show_stats)
        save_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Excel")
        save_btn.clicked.connect(self.save_excel_gui)
        quit_btn = QPushButton("üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–Ω—å")
        quit_btn.clicked.connect(self.quit_app)

        btn_layout.addWidget(add_btn)
        btn_layout.addWidget(stats_btn)
        btn_layout.addWidget(save_btn)
        btn_layout.addWidget(quit_btn)

        form_layout.addLayout(btn_layout)
        main_layout.addWidget(input_form)

    def apply_theme(self):
        palette = self.palette()
        if current_theme == "dark":
            palette.setColor(QPalette.ColorRole.Window, QColor(30, 30, 30))
            palette.setColor(QPalette.ColorRole.WindowText, QColor(220, 220, 220))
            palette.setColor(QPalette.ColorRole.Base, QColor(40, 40, 40))
            palette.setColor(QPalette.ColorRole.AlternateBase, QColor(50, 50, 50))
            palette.setColor(QPalette.ColorRole.ToolTipBase, QColor(25, 25, 25))
            palette.setColor(QPalette.ColorRole.ToolTipText, QColor(220, 220, 220))
            palette.setColor(QPalette.ColorRole.Text, QColor(220, 220, 220))
            palette.setColor(QPalette.ColorRole.Button, QColor(50, 50, 50))
            palette.setColor(QPalette.ColorRole.ButtonText, QColor(220, 220, 220))
            palette.setColor(QPalette.ColorRole.BrightText, QColor(255, 0, 0))
            palette.setColor(QPalette.ColorRole.Link, QColor(42, 130, 218))
            palette.setColor(QPalette.ColorRole.Highlight, QColor(42, 130, 218))
            palette.setColor(QPalette.ColorRole.HighlightedText, QColor(30, 30, 30))
            self.setStyleSheet(f"""
                QMainWindow, QWidget {{ background-color: #1e1e1e; color: #dcdcdc; }}
                QLineEdit, QTextEdit {{ background-color: #2a2a2a; color: #dcdcdc; border: 1px solid #555; padding: 5px; }}
                QPushButton {{ 
                    background-color: #3a3a3a; 
                    color: #dcdcdc; 
                    border: 1px solid #555; 
                    padding: 4px 8px;
                    margin: 2px;
                    border-radius: 4px;
                }}
                QPushButton:hover {{ background-color: #4a4a4a; }}
                QScrollArea {{ border: none; }}
                QLabel {{ color: #dcdcdc; }}
                QComboBox {{ background-color: #2a2a2a; color: #dcdcdc; border: 1px solid #555; }}
            """)
            self.theme_combo.setCurrentIndex(0)
        else:
            palette.setColor(QPalette.ColorRole.Window, QColor(240, 240, 240))
            palette.setColor(QPalette.ColorRole.WindowText, QColor(0, 0, 0))
            palette.setColor(QPalette.ColorRole.Base, QColor(255, 255, 255))
            palette.setColor(QPalette.ColorRole.AlternateBase, QColor(245, 245, 245))
            palette.setColor(QPalette.ColorRole.ToolTipBase, QColor(255, 255, 220))
            palette.setColor(QPalette.ColorRole.ToolTipText, QColor(0, 0, 0))
            palette.setColor(QPalette.ColorRole.Text, QColor(0, 0, 0))
            palette.setColor(QPalette.ColorRole.Button, QColor(240, 240, 240))
            palette.setColor(QPalette.ColorRole.ButtonText, QColor(0, 0, 0))
            palette.setColor(QPalette.ColorRole.BrightText, QColor(255, 0, 0))
            palette.setColor(QPalette.ColorRole.Link, QColor(0, 0, 255))
            palette.setColor(QPalette.ColorRole.Highlight, QColor(0, 120, 215))
            palette.setColor(QPalette.ColorRole.HighlightedText, QColor(255, 255, 255))
            self.setStyleSheet("""
                QMainWindow, QWidget { background-color: #f0f0f0; color: #000; }
                QLineEdit, QTextEdit { background-color: #fff; color: #000; border: 1px solid #ccc; padding: 5px; }
                QPushButton { background-color: #f0f0f0; color: #000; border: 1px solid #ccc; padding: 4px 8px; margin: 2px; border-radius: 4px; }
                QPushButton:hover { background-color: #e0e0e0; }
                QScrollArea { border: none; }
                QLabel { color: #000; }
                QComboBox { background-color: #fff; color: #000; border: 1px solid #ccc; }
            """)
            self.theme_combo.setCurrentIndex(1)

        self.setPalette(palette)

    def toggle_theme(self):
        global current_theme
        current_theme = "light" if current_theme == "dark" else "dark"
        self.apply_theme()
        self.reload_all_task_widgets()

    def reload_all_task_widgets(self):
        for i in reversed(range(self.tasks_layout.count() - 1)):
            widget = self.tasks_layout.itemAt(i).widget()
            if widget:
                widget.deleteLater()
        self.load_tasks_to_ui()

    def load_tasks_to_ui(self):
        for i in reversed(range(self.tasks_layout.count() - 1)):
            widget = self.tasks_layout.itemAt(i).widget()
            if widget:
                widget.deleteLater()

        for idx, task in enumerate(tasks):
            task_widget = TaskItemWidget(task, idx, self)
            self.tasks_layout.insertWidget(self.tasks_layout.count() - 1, task_widget)
            self.tasks_widgets.append(task_widget)

    def add_task(self):
        task_text = self.task_input.text().strip()
        if not task_text:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É!")
            return

        is_completed = task_text.startswith("!")
        if is_completed:
            task_text = task_text[1:].strip()

        task_text, extracted_link = extract_markdown_links(task_text)
        link = self.link_input.text().strip() or extracted_link

        time_str = self.time_input.text().strip()

        if time_str:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –≤—Ä–µ–º—è ‚Äî —Å–æ–∑–¥–∞—ë–º –ó–ê–í–ï–†–®–Å–ù–ù–£–Æ –∑–∞–¥–∞—á—É
            if "-" in time_str:
                minutes = parse_time_range(time_str)
            else:
                try:
                    minutes = float(time_str)
                except:
                    QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç 13:24-16:39")
                    return

            hours_hundredths = round(minutes / 60, 2)
            display_time_str = "<1 –º–∏–Ω—É—Ç—ã" if minutes < 1 else f"{int(minutes)}:{int((minutes%1)*60):02d}"
            if "-" in time_str:
                display_time_str = time_str

            # ‚úÖ –ó–ê–í–ï–†–®–Å–ù–ù–ê–Ø –∑–∞–¥–∞—á–∞ ‚Äî –ë–ï–ó timer_start
            tasks.append({
                "id": str(uuid.uuid4()),
                "task": task_text,
                "link": link,
                "time_str": display_time_str,
                "minutes": round(minutes, 2),
                "hours_hundredths": hours_hundredths
            })

        else:
            # ‚úÖ –ê–ö–¢–ò–í–ù–ê–Ø –∑–∞–¥–∞—á–∞ ‚Äî —Å timer_start
            tasks.append({
                "id": str(uuid.uuid4()),
                "task": task_text,
                "link": link,
                "timer_start": time.time(),
                "minutes": 0.0,
                "hours_hundredths": 0.0,
                "time_str": "0:00"
            })

        save_backup()
        self.task_input.clear()
        self.link_input.clear()
        self.time_input.clear()
        self.load_tasks_to_ui()

    def edit_task(self, index):
        if index < 0 or index >= len(tasks):
            return

        task = tasks[index]
        dialog = EditTaskDialog(task, self)
        if dialog.exec() == QDialog.DialogCode.Accepted:
            new_data = dialog.get_data()
            if new_data:
                tasks[index].update(new_data)
                save_backup()
                self.load_tasks_to_ui()

    def delete_task(self, index):
        if index < 0 or index >= len(tasks):
            return

        reply = QMessageBox.question(self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?",
                                    QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)
        if reply == QMessageBox.StandardButton.Yes:
            tasks.pop(index)
            save_backup()
            self.load_tasks_to_ui()

    def show_stats(self):
        total_tasks = len(tasks)
        total_minutes = round(sum(t.get('minutes', 0) for t in tasks), 2)
        total_hours = round(sum(t.get('hours_hundredths', 0) for t in tasks), 2)

        link_minutes = {}
        for t in tasks:
            if t.get('link'):
                d = parse_domain(t['link'])
                link_minutes[d] = link_minutes.get(d, 0) + t.get('minutes', 0)
        top_links = sorted(link_minutes.items(), key=lambda x: x[1], reverse=True)[:3]

        task_minutes = {}
        for t in tasks:
            task_minutes[t['task']] = task_minutes.get(t['task'], 0) + t.get('minutes', 0)
        top_tasks = sorted(task_minutes.items(), key=lambda x: x[1], reverse=True)[:3]

        stats_text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        stats_text += f"–í—Å–µ–≥–æ –∑–∞–¥–∞—á: <b>{total_tasks}</b>\n"
        stats_text += f"–û–±—â–µ–µ –≤—Ä–µ–º—è: <b>{total_minutes} –º–∏–Ω</b> / <b>{total_hours} —á</b>\n\n"

        if top_links:
            stats_text += "<b>–¢–æ–ø-3 —Å—Å—ã–ª–æ–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏:</b>\n"
            for domain, mins in top_links:
                stats_text += f" ‚Ä¢ {domain}: {round(mins, 2)} –º–∏–Ω\n"

        if top_tasks:
            stats_text += "\n<b>–¢–æ–ø-3 –∑–∞–¥–∞—á –ø–æ –≤—Ä–µ–º–µ–Ω–∏:</b>\n"
            for name, mins in top_tasks:
                stats_text += f" ‚Ä¢ {name}: {round(mins, 2)} –º–∏–Ω\n"

        QMessageBox.information(self, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", stats_text)

    def save_excel_gui(self):
        global SAVE_DIR
        options = QFileDialog.Option.DontUseNativeDialog
        folder = QFileDialog.getExistingDirectory(
            self,
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Excel-—Ñ–∞–π–ª–∞",
            SAVE_DIR,
            options=options
        )
        if folder:
            SAVE_DIR = folder
            self.log_path_label.setText(f"üìÅ {SAVE_DIR}")

        file_path = save_excel()
        if file_path:
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\n{file_path}")
            reply = QMessageBox.question(self, "–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É?", "–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å —Ñ–∞–π–ª–æ–º?",
                                        QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)
            if reply == QMessageBox.StandardButton.Yes:
                if sys.platform == "win32":
                    os.startfile(SAVE_DIR)
                elif sys.platform == "darwin":
                    os.system(f'open "{SAVE_DIR}"')
                else:
                    os.system(f'xdg-open "{SAVE_DIR}"')
        else:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å Excel")

    def open_log_folder(self):
        if os.path.exists(LOG_DIR):
            if sys.platform == "win32":
                os.startfile(LOG_DIR)
            elif sys.platform == "darwin":
                os.system(f'open "{LOG_DIR}"')
            else:
                os.system(f'xdg-open "{LOG_DIR}"')
        else:
            QMessageBox.warning(self, "–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ —Å –ª–æ–≥–∞–º–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–∞.")


    def change_save_folder(self):
        """–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Excel-—Ñ–∞–π–ª–æ–≤"""
        global SAVE_DIR
        options = QFileDialog.Option.DontUseNativeDialog
        folder = QFileDialog.getExistingDirectory(
            self,
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á—ë—Ç–æ–≤ Excel",
            SAVE_DIR,
            options=options
        )
        if folder:
            SAVE_DIR = folder
            self.log_path_label.setText(f"üìÅ {SAVE_DIR}")
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–ü–∞–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞:\n{SAVE_DIR}")

    def clear_all_logs(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏ (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ .txt) –∏ Excel-—Ñ–∞–π–ª—ã + –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"""
        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –ª–æ–≥–∏ –∏ —Å–±—Ä–æ—Å–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á?\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        if reply != QMessageBox.StandardButton.Yes:
            return

        try:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ .txt –≤ LOG_DIR
            if os.path.exists(LOG_DIR):
                for file in os.listdir(LOG_DIR):
                    if file.endswith(".txt"):
                        os.remove(os.path.join(LOG_DIR, file))

            # –£–¥–∞–ª—è–µ–º –≤—Å–µ .xlsx –≤ SAVE_DIR (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ‚Äî –º–æ–∂–Ω–æ —Å–ø—Ä–æ—Å–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ)
            if os.path.exists(SAVE_DIR):
                for file in os.listdir(SAVE_DIR):
                    if file.endswith(".xlsx") and file.startswith(datetime.date.today().strftime("%Y-%m-%d")):
                        os.remove(os.path.join(SAVE_DIR, file))

            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
            tasks.clear()
            save_backup()  # –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π backup
            self.load_tasks_to_ui()

            QMessageBox.information(self, "–û—á–∏—Å—Ç–∫–∞", "–í—Å–µ –ª–æ–≥–∏ –∏ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã.")

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏:\n{str(e)}")


    def quit_app(self):
        save_excel()
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        if os.path.exists(active_tasks_file):
            try:
                os.remove(active_tasks_file)
            except Exception as e:
                print(Fore.YELLOW + f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
        QApplication.quit()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())